def dumpParams(String outputFile) {
  echo "Dumping all parameters to " + outputFile
  def lines = ""
  params.each() { param, value ->
    lines = lines + "${param}=\"${value}\"\n"
  }
  writeFile file: outputFile, text: lines
}

pipeline {
    agent any

   options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
     }

    stages {
        stage('Main') {
            steps {
                cleanWs()
                script {
                    echo "JOB_NAME:[${env.JOB_NAME}]"
                    echo "SCRIPT:[${env.PATH_TO_SCRIPT}]"
                    // warning, GIT_BRANCH var alreads points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "main"
                    }
                    echo "GIT_REPOSITORY_URL:[${env.GIT_REPOSITORY_URL}]"
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                }

                dir('hera') {
                  git branch: 'jenkins_jobs_vol', url: 'https://github.com/jboss-set/hera.git', poll: false, changelog: false
                }

                dir('harmonia') {
                  git branch: 'ansible-playbook', url: 'https://github.com/jboss-set/harmonia.git', poll: false, changelog: false
                }

                dir('workdir') {
                  git url: "${env.GIT_REPOSITORY_URL}", branch: "${env.GIT_REPOSITORY_BRANCH}"
                }

                script {
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/harmonia/${env.PATH_TO_SCRIPT}"
                    env.WORKDIR = "${env.WORKSPACE}/workdir/"
                    dumpParams("${env.WORKSPACE}/job_params.txt")
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job ${env.WORKSPACE}/job_params.txt"
                    archiveArtifacts artifacts: 'workdir/downstream/**/*', fingerprint: true, followSymlinks: true, onlyIfSuccessful: true
               }
           }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
        }
        failure {
            mail to: 'Romain Pelisse <rpelisse@redhat.com>, Guido Grazioli <ggraziol@redhat.com>',
                 from: 'Romain Pelisse <rpelisse@redhat.com>',
                 subject: "Build: ${env.JOB_NAME} - Failed",
                 body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
