def lookupLastSuccessfulBuildId(String parent_jobname) {
  echo "Fetching last successful build ID of parent job:" + parent_jobname
  def lastSuccessfulBuildId = sh(script:"/var/jenkins_home/fetchLastSuccessfulBuildId.sh ${parent_jobname}", returnStdout: true)
  echo "PARENT JOB LAST SUCCESSFUL BUILD ID: " + lastSuccessfulBuildId
  if ( "${lastSuccessfulBuildId}".equals("0") ) {
    error("Build failed because parent job has never run.")
  }
  return lastSuccessfulBuildId.trim()
}

def lastSuccessfullBuildOfParentJob() {
  def parent_jobname = "ansible-janus-${env.PROJECT_UPSTREAM_NAME}"
  def parent_job_home = "/jenkins_jobs/${parent_jobname}/"
  env.PARENT_JOB_HOME = "${parent_job_home}"
  env.PARENT_JOB_BUILDS_DIR = "${parent_job_home}/permalinks"
  echo "Retrieve build id from ${env.PARENT_JOB_HOME}."
  env.LAST_SUCCESS_FULL_BUILD_ID = lookupLastSuccessfulBuildId(parent_jobname)
  echo "Run ${env.JOB_NAME} with last successful Janus build ${env.LAST_SUCCESS_FULL_BUILD_ID} of ${parent_jobname}."
}

def isCopyFromParentJobRequired() {
  return "True".equalsIgnoreCase("${env.COPY_FROM_PARENT_JOB}")
}

def dumpParams(String outputFile) {
  echo "Dumping all parameters to " + outputFile
  def lines = ""
  params.each() { param, value ->
    lines = lines + "${param}=\"${value}\"\n"
  }
  if ( isCopyFromParentJobRequired() ) {
    lines = lines + "LAST_SUCCESS_FULL_BUILD_ID=\"${env.LAST_SUCCESS_FULL_BUILD_ID}\"\n"
    lines = lines + "PARENT_JOB_HOME=\"${env.PARENT_JOB_HOME}\"\n"
  }
  writeFile file: outputFile, text: lines
}

def isJanusJob() {
  return (! "null".equalsIgnoreCase("${env.JANUS_BRANCH}") && ! "null".equalsIgnoreCase("${env.JANUS_GIT_REPOSITORY_URL}") )
}

def isRelease() {
  return (  ! "TEST".equals("${env.RELEASE_NAME}") &&
            ! "".equals("{env.RELEASE_NAME}") &&
            ! "${env.RELEASE_NAME}".equals("null") )
}

def triggerNextJob(String jobname) {
    if (jenkins.model.Jenkins.instance.getItem(jobname) != null) {
        echo "Trigger job ${jobname}:"
        build wait: isRelease(), job: jobname, parameters: [string(name: 'RELEASE_NAME', value: "${env.RELEASE_NAME}")]
    }
}

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps ()
    }

    stages {
        stage('Main') {
            steps {
                cleanWs()
                script {
                    echo "JOB_NAME:[${env.JOB_NAME}]"
                    echo "SCRIPT:[${env.PATH_TO_SCRIPT}]"
                    echo "RELEASE_NAME:[${env.RELEASE_NAME}]"
                    echo "MIDDLEWARE_DOWNLOAD_RELEASE_SERVER_URL:[${env.MIDDLEWARE_DOWNLOAD_RELEASE_SERVER_URL}]"
                    // warning, GIT_BRANCH var alreads points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "main"
                    }
                    echo "GIT_REPOSITORY_URL:[${env.GIT_REPOSITORY_URL}]"
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                    echo "CHECKOUT_GIT_PROJECT:[${env.CHECKOUT_GIT_PROJECT}]"
                    env.WORKDIR = "${env.WORKSPACE}/workdir/"
                    echo "WORKDIR: [${env.WORKDIR}]"
                }

                dir('hera') {
                  git url: 'https://github.com/jboss-set/hera.git', branch: 'master', poll: false, changelog: false
                }

                dir('harmonia') {
                  git url: "${env.HARMONIA_REPO}", branch: "${env.HARMONIA_BRANCH}", poll: false, changelog: false
                }

                dir('eris') {
                  git url: 'git@github.com:jboss-set/eris.git', branch: 'main', poll: false, changelog: false
                }

                script {
                   if ( "${env.CHECKOUT_GIT_PROJECT}".equalsIgnoreCase("True") ) {
                     dir('workdir') {
                       echo "Workdir is check out of project: ${env.GIT_REPOSITORY_URL}"
                       checkout([$class: 'GitSCM', branches: [[name: "${env.GIT_REPOSITORY_BRANCH}"]], userRemoteConfigs: [[url: "${env.GIT_REPOSITORY_URL}"]]])
                     }
                   }
                   if ( isJanusJob() ) {
                     dir('workdir') {
                       echo "Workdir is checkout from Janus."
                       git url: "${env.JANUS_GIT_REPOSITORY_URL}", branch: "${JANUS_BRANCH}"
                     }
                   }
                   sh label: 'create-workdir', script: "mkdir -p ${env.WORKSPACE}/workdir/"
                }

                script {
                    if ( isCopyFromParentJobRequired() ) {
                       lastSuccessfullBuildOfParentJob()
                    }
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/harmonia/${env.PATH_TO_SCRIPT}"
                    dumpParams("${env.WORKSPACE}/job_params.txt")
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job ${env.WORKSPACE}/job_params.txt"
                    findText(textFinders: [
                      textFinder(regexp: /MOLECULE_EXIT_CODE/, alsoCheckConsoleOutput: true, buildResult: 'UNSTABLE', changeCondition: 'MATCH_FOUND'),
                    ])
		            if ( isJanusJob() ) {
                      archiveArtifacts artifacts: 'workdir/downstream/**/*', fingerprint: true, followSymlinks: true, onlyIfSuccessful: true
                    }
               }
           }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
            cleanWs()
        }
        success {
            script {
              // The release job will take care of trigger jobs in the right order
              if ( ! "zeus".equals("${env.PROJECT_NAME}") ) {
                if ( "${env.JOB_NAME}".startsWith("ansible-ci") ) {
                  echo "Successful job triggers ansible-janus-${env.PROJECT_NAME}"
                  triggerNextJob("ansible-janus-${env.PROJECT_UPSTREAM_NAME}")
                }
                if ( isJanusJob() && ! "${env.JOB_NAME}".endsWith("runtimes_common") ) {
                  echo "This is a Janus job, triggering downstream jobs."
                  triggerNextJob("ansible-downstream-runner-${env.PROJECT_NAME}")
                  triggerNextJob("ansible-downstream-ci-${env.PROJECT_NAME}")
                  triggerNextJob("ansible-downstream-tests-${env.PROJECT_NAME}-dot")
                }
                if ( isRelease() ) {
                  echo "${env.RELEASE_NAME} - set release build to keep log forever"
                  currentBuild.setKeepLog(true)
                  currentBuild.setDisplayName("${env.RELEASE_NAME}")
                }
              }
            }
        }
        failure {
            mail to: "${env.EMAIL_TO}",
                 from: "${env.EMAIL_FROM}",
                 subject: "Build: ${env.JOB_NAME} - Failed",
                 body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
