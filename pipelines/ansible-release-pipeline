def tagBuild(String jobname, String releaseName = "TEST", String gitBranch = "main") {
    echo "Triggers ${jobname} with branch ${gitBranch}"
    def jobRunResults = build(job: "${jobname}", parameters: [string(name: 'GIT_REPOSITORY_BRANCH', value: "${gitBranch}"), string(name: 'RELEASE_NAME', value: "${releaseName}")])
    def job = Jenkins.instance.getItem("${jobname}")
    def build = job.getBuild(jobRunResults.id)
    echo "${jobname} - set release build to keep log forever"
    if ( ! "TEST".equals(releaseName) )
      build.keepLog(true)
    echo "${jobname} - set release name to ${releaseName}"
    build.setDisplayName(releaseName)
    return build.url
}

def returnPathToTarball(Collection coll) {
    for ( item in coll) {
        if ( item.toString().endsWith(".tar.gz") ) return item.toString()
    }
}

def retrievePathToJanusDownload(String jobname) {
    def job = Jenkins.instance.getItem(jobname)
    def build = job.getLastBuild()
    def jobUrl = build.url
    def artifactPath = returnPathToTarball(build.artifacts)
    return "${jobUrl}/artifact/${artifactPath}"
}

node {

   def collectionName = "${env.COLLECTION_NAME}"
   def upstreamCollectionName = "${env.PROJECT_UPSTREAM_NAME}"
   def releaseName = "${env.RELEASE_NAME}"
   def buildUrls = []

   currentBuild.setDisplayName(releaseName ?: "TEST")
   stage("Run upstream CI for collection ${collectionName}") {
       buildUrls[0] = tagBuild("ansible-ci-${upstreamCollectionName}", "${releaseName}", "${env.GIT_REPOSITORY_BRANCH}")
   }
   stage('Run Janus to generate downstream collection') {
       buildUrls[1] = tagBuild("ansible-janus-${collectionName}", "${releaseName}", "${env.GIT_REPOSITORY_BRANCH}")
   }
   stage('run-parallel-branches') {
       stage("Parallel") {
           parallel (
               "Run downstream CI for collection ${collectionName}" : {
                   buildUrls[2] = tagBuild("ansible-downstream-ci-${collectionName}", "${releaseName}")
               },
               "Run downstream-only tests (dot) for collection ${collectionName}" : {
                   buildUrls[3] = tagBuild("ansible-downstream-tests-${collectionName}-dot", "${releaseName}")
               },
               "Run downstream runner for collection ${collectionName}" : {
                   buildUrls[4] = tagBuild("ansible-downstream-runner-${collectionName}", "${releaseName}")
               }
           )
       }
   }
   stage("Report") {
      dir('harmonia') {
        git url: "${env.HARMONIA_REPO}", branch: "${env.HARMONIA_BRANCH}", poll: false, changelog: false
      }
      echo "${buildUrls}"
      //env.PATH_TO_REPORT = "${env.WORKSPACE/release_report.html}"
      if ( env.ANSIBLE_RELEASE_DEBUG) echo "Path to jobs: ${buildUrls}"
      env.BUILD_RELEASE_ARTEFACTS = retrievePathToJanusDownload("ansible-janus-${collectionName}")
      if ( env.ANSIBLE_RELEASE_DEBUG) echo "${env.BUILD_RELEASE_ARTEFACTS}"
      env.BUILD_CI = "${buildUrls[0]}"
      env.BUILD_JANUS = "${buildUrls[1]}"
      env.BUILD_DOWNSTREAM_CI = "${buildUrls[2]}"
      env.BUILD_DOT = "${buildUrls[3]}"
      env.BUILD_RUNNER = "${buildUrls[4]}"
      //sh(script:"${env.WORKSPACE}/harmonia/${env.PATH_TO_SCRIPT}", returnStdout: true)
      sh(script:"${env.WORKSPACE}/harmonia/ansible/release/report.sh", returnStdout: true)
      archiveArtifacts artifacts: 'report.html', followSymlinks: false
      publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '.', reportFiles: 'report.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
   }
}
