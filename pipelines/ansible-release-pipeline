def tagBuild(String jobname, String releaseName = "TEST", String gitBranch = "main") {
    echo "Triggers ${jobname} with branch ${gitBranch}"
    def jobRunResults = build(job: "${jobname}", parameters: [string(name: 'GIT_REPOSITORY_BRANCH', value: "${gitBranch}"), string(name: 'RELEASE_NAME', value: "${releaseName}")])
    def job = Jenkins.instance.getItem("${jobname}")
    def build = job.getBuild(jobRunResults.id)
    echo "${jobname} - set release build to keep log forever"
    if ( ! "TEST".equals(releaseName) )
      build.keepLog(true)
    echo "${jobname} - set release name to ${releaseName}"
    build.setDisplayName(releaseName)
    return build.url
}

def returnPathToTarball(Collection coll) {
    for ( item in coll) {
        if ( item.toString().endsWith(".tar.gz") ) return item.toString()
    }
}

def retrievePathToJanusDownload(String jobname) {
    def job = Jenkins.instance.getItem(jobname)
    def build = job.getLastBuild()
    def jobUrl = build.url
    def artifactPath = returnPathToTarball(build.artifacts)
    return "${jobUrl}/artifact/${artifactPath}"
}

def retrieveTaggedBuildURLForJob(String jobName, String releaseName) {
  def url = "Fail to retrieved absolute URL from job ${jobName} tagged ${releaseName}"
  Jenkins.instance.getItem(jobName).getBuilds().each {
    b -> if ( b.getDisplayName().equals(releaseName) ) url = b.getAbsoluteUrl()
  }
  return url
}

node {

   def collectionName = "${env.COLLECTION_NAME}"
   def upstreamCollectionName = "${env.PROJECT_UPSTREAM_NAME}"
   def releaseName = "${env.RELEASE_NAME}"

   currentBuild.setDisplayName(releaseName ?: "TEST")
   stage("Run upstream CI for collection ${collectionName}") {
       build = tagBuild("ansible-ci-${upstreamCollectionName}", "${releaseName}", "${env.GIT_REPOSITORY_BRANCH}")
   }
   stage("Report") {
      dir('harmonia') {
        git url: "${env.HARMONIA_REPO}", branch: "${env.HARMONIA_BRANCH}", poll: false, changelog: false
      }
      env.BUILD_RELEASE_ARTEFACTS = retrievePathToJanusDownload("ansible-janus-${collectionName}")
      if ( env.ANSIBLE_RELEASE_DEBUG) echo "${env.BUILD_RELEASE_ARTEFACTS}"
      env.BUILD_CI = retrieveTaggedBuildURLForJob("ansible-ci-${upstreamCollectionName}", "${releaseName}")
      env.BUILD_JANUS = retrieveTaggedBuildURLForJob("ansible-janus-${collectionName}", "${releaseName}")
      env.BUILD_DOWNSTREAM_CI = retrieveTaggedBuildURLForJob("ansible-downstream-ci-${collectionName}","${releaseName}")
      env.BUILD_DOT = retrieveTaggedBuildURLForJob("ansible-downstream-tests-${collectionName}-dot","${releaseName}")
      env.BUILD_RUNNER = retrieveTaggedBuildURLForJob("ansible-downstream-runner-${collectionName}", "${releaseName}")
      sh(script:"${env.WORKSPACE}/harmonia/ansible/release/report.sh", returnStdout: true)
      archiveArtifacts artifacts: 'report.html', followSymlinks: false
      publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '.', reportFiles: 'report.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
  }
}
