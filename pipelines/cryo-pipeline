def lookupLastSuccessfulBuildId(String parent_jobname) {
  echo "Fetching last successful build ID of parent job:" + parent_jobname
  def lastSuccessfulBuildId = sh(script:"/var/jenkins_home/fetchLastSuccessfulBuildId.sh ${parent_jobname}", returnStdout: true)
  echo "PARENT JOB LAST SUCCESSFUL BUILD ID: " + lastSuccessfulBuildId
  if ( "${lastSuccessfulBuildId}".equals("0") ) {
    error("Build failed because parent job has never run.")
  }
  return lastSuccessfulBuildId.trim()
}

def dumpParameters(String outputFile) {
  echo "Dumping all parameters into a file for loading in cry.sh"
  def lines = ""
  params.each() { param, value ->
    def line = "export ${param}=\"${value}\"\n"
    println line
    lines = lines + line
  }
  lines = lines + "export HARMONIA_SCRIPT=\"${env.HARMONIA_SCRIPT}\"\n"
  lines = lines + "export CRYO_HARMONIA_SH=\"${env.CRYO_HARMONIA_SH}\"\n"

  writeFile file: outputFile, text: lines
  echo "Done.."
}

pipeline {
    agent any
    options {
      buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
    }
    stages {
        stage('Prep') {
            steps {
                cleanWs()
                dir('hera') {
                  git url: 'https://github.com/jboss-set/hera.git', poll: false, changelog: false
                }
                dir('harmonia') {
                  git branch: 'main', url: 'https://github.com/jboss-set/harmonia.git', poll: false, changelog: false
                }
                sh "mkdir -p workdir"
                script {
                    // warning, GIT_BRANCH var already points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "master"
                    }
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                    env.BUILD_COMMAND = ""
                    def parent_jobname = ""
                    env.TRIGGER_JOB_NAME = ""
                    if ( "${env.JOB_NAME}".endsWith("-repository-build") ) {
                        dir('workdir') {
                          git url: "${env.GIT_REPOSITORY_URL}",
                              branch: "${env.GIT_REPOSITORY_BRANCH}"
                        }
                        dir('auxilia') {
                          git url: 'https://github.com/jboss-set/auxilia.git', poll: false, changelog: false
                        }
                        env.BUILD_COMMAND = "cryo"
                        if ( env.HARMONIA_SCRIPT == null || "".equals("${env.HARMONIA_SCRIPT}") ) {
                            env.CRYO_HARMONIA_SH = "eap-job/olympus.sh"
                        } else {
                            env.CRYO_HARMONIA_SH = env.HARMONIA_SCRIPT
                        }
                        env.HARMONIA_SCRIPT = "cryo.sh"
                        parent_jobname = "ci-cryo"
                        dumpParameters("${env.WORKSPACE}/cryo-params.sh")
                        env.TRIGGER_JOB_NAME = "${env.JOB_NAME}".replaceAll("-repository-build","-build")
                    } else if ( "${env.JOB_NAME}".endsWith("-build") ) {
                        env.BUILD_COMMAND = "build"
                        if ( env.HARMONIA_SCRIPT == null || "".equals("${env.HARMONIA_SCRIPT}") ) {
                             env.HARMONIA_SCRIPT = "eap-job/olympus.sh"
                        }
                        env.COPY_ARTIFACTS = "true"
                        parent_jobname = "${env.JOB_NAME}".replace("-build","-repository-build")
                        env.TRIGGER_JOB_NAME = "${env.JOB_NAME}".replaceAll("-build","-testsuite")
                    } else if ( "${env.JOB_NAME}".endsWith("-testsuite") ) {
                        env.BUILD_COMMAND = "testsuite"
                        if ( env.HARMONIA_SCRIPT == null || "".equals("${env.HARMONIA_SCRIPT}") ) {
                             env.HARMONIA_SCRIPT = "eap-job/olympus.sh"
                        }
                        parent_jobname = "${env.JOB_NAME}".replace("-testsuite","-build")
                    } else {
                        currentBuild.result = 'ABORTED'
                        error("Invalid JOB_NAME: ${env.JOB_NAME}, can't determine BUILD_COMMAND (missing -repository-build, -build or -testsuite suffix). Abort.")
                    }
                    assert ! "".equals(parent_jobname)
                    echo "BUILD_COMMAND:[${env.BUILD_COMMAND}]"
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/build-wrapper.sh"
                    def lastSuccessfulBuildId = lookupLastSuccessfulBuildId(parent_jobname)
                    assert lastSuccessfulBuildId.isNumber()
                    env.PARENT_JOB_BUILD_ID = "${lastSuccessfulBuildId}"
                    env.PARENT_JOB_NAME = "${parent_jobname}"
                    echo "Parent job name: ${env.PARENT_JOB_NAME}"
                    echo "Parent job build ID: ${env.PARENT_JOB_BUILD_ID}"

                }
                // Start container
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
            }
        }
        stage ('Cryo') {
            when { expression { env.BUILD_COMMAND == 'cryo' } }
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                script {
                    //archive workdir
                    def branch =""
                    def EAP_FILE_ARCHIVE=""
                    dir('workdir'){
                        branch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                        EAP_FILE_ARCHIVE="eap_${branch}.tar.gz"
                    }

                    sh "tar -czf ${EAP_FILE_ARCHIVE} -C ./workdir ."
                }
                archiveArtifacts artifacts: '**/*', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                findText(textFinders: [
                    textFinder(regexp: ".*CRYO.*SUCCESS.*(Dry run complete|Push future).*", alsoCheckConsoleOutput: true, buildResult: 'SUCCESS', changeCondition: 'MATCH_FOUND')
                ])
            }
        }
        stage ('EAP Build') {
            when { expression { env.BUILD_COMMAND == 'build' } }
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                archiveArtifacts artifacts: '**/*', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                findText(textFinders: [
                    textFinder(regexp: /.INFO. BUILD FAILURE/, alsoCheckConsoleOutput: true, buildResult: 'UNSTABLE', changeCondition: 'MATCH_FOUND'),
                    textFinder(regexp: /.INFO. BUILD ERROR/, alsoCheckConsoleOutput: true, buildResult: 'FAILURE', changeCondition: 'MATCH_FOUND')
                ])
            }
        }
        stage ('EAP TestSuite') {
            when { expression { env.BUILD_COMMAND == 'testsuite' } }
            steps {
                script {
                  try {
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                  } catch (err) {
                    echo "Error during build ${err}"
                  }
                  junit "**/target/surefire-reports/*.xml"
                  findText(textFinders: [
                      textFinder(regexp: /.INFO. BUILD FAILURE/, alsoCheckConsoleOutput: true, buildResult: 'UNSTABLE', changeCondition: 'MATCH_FOUND'),
                      textFinder(regexp: /.INFO. BUILD ERROR/, alsoCheckConsoleOutput: true, buildResult: 'FAILURE', changeCondition: 'MATCH_FOUND')
                  ])
                }
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
            cleanWs()
        }
        success {
            script {
                if ( "" != env.TRIGGER_JOB_NAME ) {
                    try {
                        build wait: false, job: "${env.TRIGGER_JOB_NAME}"
                    } catch (err) {
                        echo "[NOTICE] No Job: '${env.TRIGGER_JOB_NAME}' associated to this job, no job triggered"
                    }
                }
            }
        }
        failure {
            mail to: 'lgao@redhat.com', from: 'lgao@redhat.com',
                subject: "Build: ${env.JOB_NAME} - Failed",
                body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
