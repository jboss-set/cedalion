def dumpParams(String outputFile) {
  echo "Dumping all parameters to " + outputFile
  def lines = ""
  params.each() { param, value ->
    lines = lines + "${param}=\"${value}\"\n"
  }
  writeFile file: outputFile, text: lines
}

pipeline {
    agent any

    options {
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    stages {
        stage('Prep') {
            steps {
                //cleanWs()
                script {
                    // warning, GIT_BRANCH var already points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "master"
                    }
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                }
                dir('workdir') {
                  git url: "${env.GIT_REPOSITORY_URL}",
                      branch: "${env.GIT_REPOSITORY_BRANCH}"
                }
                dir('hera') {
                  git url: 'https://github.com/jboss-set/hera.git', poll: false, changelog: false
                }
                dir('harmonia') {
                  git branch: 'main', url: 'https://github.com/jboss-set/harmonia.git', poll: false, changelog: false
                }
                dir('configs') {
                  git url: "${env.INTERNAL_GIT_REPOSITORY_URL}/jboss-set/dependency-alignment-configs.git",
                      branch: 'master',
                      poll: false,
                      changelog: false
                }

                script {
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/build-wrapper.sh"
                    dumpParams("${env.WORKSPACE}/job_params.txt")
                }
                // Start container
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
            }
        }
        stage ('Build') {
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job ${env.WORKSPACE}/job_params.txt"
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
            archiveArtifacts artifacts: 'workdir/report.html', fingerprint: false, allowEmptyArchive: true
        }
        failure {
            mail to: 'jboss-set-ops@redhat.com,thofman@redhat.com', from: 'rpelisse@redhat.com',
                subject: "Build: ${env.JOB_NAME} - Failed",
                body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
